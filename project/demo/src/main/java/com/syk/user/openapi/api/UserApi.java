/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.syk.user.openapi.api;

import com.syk.user.openapi.model.BadRequestResponseModel;
import com.syk.user.openapi.model.UserCreateModel;
import com.syk.user.openapi.model.UserResultModel;
import com.syk.user.openapi.model.UserSearchResultModel;
import com.syk.user.openapi.model.UserUpdateModel;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-17T23:49:43.779832900+08:00[Asia/Shanghai]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "用户信息登录", nickname = "create", notes = "用户信息登录的操作", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "显示资源添加成功"),
        @ApiResponse(code = 400, message = "错误参数", response = BadRequestResponseModel.class),
        @ApiResponse(code = 401, message = "令牌认证失败"),
        @ApiResponse(code = 409, message = "矛盾的数据"),
        @ApiResponse(code = 500, message = "未知错误") })
    @RequestMapping(value = "/user",
        produces = { "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> create(@ApiParam(value = "用户情报(登录)"  )  @Valid @RequestBody UserCreateModel userCreateModel) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "用户信息的删除", nickname = "deleteById", notes = "根据用户id删除用户信息", authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "処理成功"),
        @ApiResponse(code = 400, message = "错误参数", response = BadRequestResponseModel.class),
        @ApiResponse(code = 401, message = "令牌认证失败"),
        @ApiResponse(code = 404, message = "指定的资源不存在"),
        @ApiResponse(code = 500, message = "未知错误") })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/problem+json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteById(@ApiParam(value = "用户id指定",required=true) @PathVariable("id") Integer id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "用户信息检索", nickname = "findById", notes = "用户信息检索的操作", response = UserResultModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "处理成功", response = UserResultModel.class),
        @ApiResponse(code = 400, message = "错误参数", response = BadRequestResponseModel.class),
        @ApiResponse(code = 404, message = "指定的资源不存在"),
        @ApiResponse(code = 500, message = "未知错误") })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserResultModel> findById(@ApiParam(value = "用户id指定",required=true) @PathVariable("id") Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"birthday\" : \"2000-01-23\",  \"note\" : \"note\",  \"user_email\" : \"user_email\",  \"address\" : \"address\",  \"occupation\" : \"occupation\",  \"collage\" : \"collage\",  \"nation\" : \"nation\",  \"city\" : \"city\",  \"user_name\" : \"user_name\",  \"sex\" : 1,  \"password\" : \"password\",  \"province\" : \"province\",  \"phone\" : \"phone\",  \"nickname\" : \"nickname\",  \"id\" : 0,  \"age\" : 6,  \"height\" : \"height\",  \"hobby\" : \"hobby\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "用户信息一览检索", nickname = "search", notes = "任意条件指定的情况下，检索用户数据一览", response = UserSearchResultModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "処理成功", response = UserSearchResultModel.class),
        @ApiResponse(code = 400, message = "错误参数", response = BadRequestResponseModel.class),
        @ApiResponse(code = 401, message = "令牌认证失败"),
        @ApiResponse(code = 500, message = "未知错误") })
    @RequestMapping(value = "/user",
        produces = { "application/json", "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserSearchResultModel> search(@ApiParam(value = "用户id　：　检索key、完全一致") @Valid @RequestParam(value = "id", required = false) Integer id,@ApiParam(value = "用户名字　：　检索key、完全一致") @Valid @RequestParam(value = "user_name", required = false) String userName,@ApiParam(value = "用户地址　：　检索key、完全一致") @Valid @RequestParam(value = "address", required = false) String address,@ApiParam(value = "国籍　：　检索key、完全一致") @Valid @RequestParam(value = "nation", required = false) String nation,@ApiParam(value = "省份　：　检索key、完全一致") @Valid @RequestParam(value = "province", required = false) String province,@ApiParam(value = "城市　：　检索key、完全一致") @Valid @RequestParam(value = "city", required = false) String city,@ApiParam(value = "年龄　：　检索key、完全一致") @Valid @RequestParam(value = "age", required = false) Integer age,@ApiParam(value = "性别　：　检索key、完全一致") @Valid @RequestParam(value = "sex", required = false) Integer sex,@ApiParam(value = "毕业院校　：　检索key、完全一致") @Valid @RequestParam(value = "collage", required = false) String collage,@ApiParam(value = "职业　：　检索key、完全一致") @Valid @RequestParam(value = "occupation", required = false) String occupation,@ApiParam(value = "昵称　：　检索key、完全一致") @Valid @RequestParam(value = "nickname", required = false) String nickname,@ApiParam(value = "用户电话　：　检索key、完全一致") @Valid @RequestParam(value = "phone", required = false) String phone,@ApiParam(value = "指定要返回的数据件数") @Valid @RequestParam(value = "limit", required = false) Long limit,@ApiParam(value = "指定在要返回的数据中，不返还从开头用“offset”写的件数的数据") @Valid @RequestParam(value = "offset", required = false) Long offset,@ApiParam(value = "以逗号分隔的方式指定排序顺序的降序时，排头为负数") @Valid @RequestParam(value = "order", required = false) String order) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"offset\" : 0,  \"limit\" : 1,  \"users\" : [ {    \"birthday\" : \"2000-01-23\",    \"note\" : \"note\",    \"user_email\" : \"user_email\",    \"address\" : \"address\",    \"occupation\" : \"occupation\",    \"collage\" : \"collage\",    \"nation\" : \"nation\",    \"city\" : \"city\",    \"user_name\" : \"user_name\",    \"sex\" : 1,    \"password\" : \"password\",    \"province\" : \"province\",    \"phone\" : \"phone\",    \"nickname\" : \"nickname\",    \"id\" : 0,    \"age\" : 6,    \"height\" : \"height\",    \"hobby\" : \"hobby\"  }, {    \"birthday\" : \"2000-01-23\",    \"note\" : \"note\",    \"user_email\" : \"user_email\",    \"address\" : \"address\",    \"occupation\" : \"occupation\",    \"collage\" : \"collage\",    \"nation\" : \"nation\",    \"city\" : \"city\",    \"user_name\" : \"user_name\",    \"sex\" : 1,    \"password\" : \"password\",    \"province\" : \"province\",    \"phone\" : \"phone\",    \"nickname\" : \"nickname\",    \"id\" : 0,    \"age\" : 6,    \"height\" : \"height\",    \"hobby\" : \"hobby\"  } ]}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "用户信息的更新", nickname = "updateById", notes = "根据用户id更新用户信息", response = UserResultModel.class, authorizations = {
        @Authorization(value = "Bearer")
    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "処理成功", response = UserResultModel.class),
        @ApiResponse(code = 400, message = "错误参数", response = BadRequestResponseModel.class),
        @ApiResponse(code = 401, message = "令牌认证失败"),
        @ApiResponse(code = 404, message = "指定的资源不存在"),
        @ApiResponse(code = 409, message = "矛盾的数据"),
        @ApiResponse(code = 500, message = "未知错误") })
    @RequestMapping(value = "/user/{id}",
        produces = { "application/json", "application/problem+json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<UserResultModel> updateById(@ApiParam(value = "用户id指定",required=true) @PathVariable("id") Integer id,@ApiParam(value = "用户情报(登录)"  )  @Valid @RequestBody UserUpdateModel userUpdateModel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"birthday\" : \"2000-01-23\",  \"note\" : \"note\",  \"user_email\" : \"user_email\",  \"address\" : \"address\",  \"occupation\" : \"occupation\",  \"collage\" : \"collage\",  \"nation\" : \"nation\",  \"city\" : \"city\",  \"user_name\" : \"user_name\",  \"sex\" : 1,  \"password\" : \"password\",  \"province\" : \"province\",  \"phone\" : \"phone\",  \"nickname\" : \"nickname\",  \"id\" : 0,  \"age\" : 6,  \"height\" : \"height\",  \"hobby\" : \"hobby\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
